#Port will be assigned dynamically
server.port=9082

spring.application.name=ibmro-api-gateway


#Eureka
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance-id:${random.value}}

#Actuators
management.endpoints.web.exposure.include=beans,health,routes,httptrace,gateway
management.endpoint.gateway.enabled=true
#Actuators End


#Security

#Login URL Path
#login.url.path=/users/login

token.secret=abcdlkjlkiii22399ikasjfd09099999asldasdfee2222
token.expiration_time=900000

#Security End

#Moved 2 SCCServer
#eureka.client.service-url.defaultZone=http://localhost:8010/eureka

################ Automatic Routing Properties Start ################ 
#If we don't want to create custom routes we can use the below two properties. If we want to write custom routes we should not use these 
#The URL should be like: http://localhost:8082/users-service/users/version
#spring.cloud.gateway.discovery.locator.enabled=true

#This property is to make the API Gateway URL is case insensitive
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

################ Auto Routing Properties End ################

################ Custom Routing Properties Start ################

####  USERS-SERVICE Routing Start
#Route id generated as 100->UserService, 0->0th Route, 1 Indicates route index
spring.cloud.gateway.routes[0].id= ibmro-users-service-getusers
spring.cloud.gateway.routes[0].uri= lb://ibmro-users-service
spring.cloud.gateway.routes[0].predicates[0]= Path=/users/{segment}
spring.cloud.gateway.routes[0].predicates[1]= Method=GET
#This just validates if the request has a Authorization header or not. It don't validates the token
#spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0] = RemoveRequestHeader=Cookie
#When we want redirect the request to a differnt path
#spring.cloud.gateway.routes[0].filters[1]= RewritePath=/users/v, /users/version
#Applying custom filter to a request
#spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter


#POST Users
spring.cloud.gateway.routes[1].id= ibmro-users-service-postusers
spring.cloud.gateway.routes[1].uri= lb://ibmro-users-service
spring.cloud.gateway.routes[1].predicates[0]= Path=/users
spring.cloud.gateway.routes[1].predicates[1]= Method=POST


#Login
spring.cloud.gateway.routes[2].id= ibmro-users-service-login
spring.cloud.gateway.routes[2].uri= lb://ibmro-users-service
spring.cloud.gateway.routes[2].predicates[0]= Path=/users/login
spring.cloud.gateway.routes[2].predicates[1]= Method=POST

#Login
spring.cloud.gateway.routes[5].id= ibmro-users-service-login
spring.cloud.gateway.routes[5].uri= lb://ibmro-users-service
spring.cloud.gateway.routes[5].predicates[0]= Path=/users/refreshtoken
spring.cloud.gateway.routes[5].predicates[1]= Method=POST
spring.cloud.gateway.routes[5].filters[0]=JWTAuthorizationFilter

spring.cloud.gateway.routes[6].id= ibmro-users-service-deleteusers
spring.cloud.gateway.routes[6].uri= lb://ibmro-users-service
spring.cloud.gateway.routes[6].predicates[0]= Path=/users/{segment}
spring.cloud.gateway.routes[6].predicates[1]= Method=DELETE
spring.cloud.gateway.routes[6].filters[0] = JWTAuthorizationFilter

#### USERS-SERVICE Routing End





####  GROUPS-SERVICE Routing Start
spring.cloud.gateway.routes[3].id= ibmro-groups-service-version
spring.cloud.gateway.routes[3].uri= lb://ibmro-groups-service
spring.cloud.gateway.routes[3].predicates[0]= Path=/groups/version
spring.cloud.gateway.routes[3].predicates[1]= Method=GET
#This just validates if the request has a Authorization header or not. It don't validates the token
#spring.cloud.gateway.routes[2].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0] = RemoveRequestHeader=Cookie
#When we want redirect the request to a differnt path
#spring.cloud.gateway.routes[2].filters[1]= RewritePath=/users/v, /users/version
#Applying custom filter to a request
spring.cloud.gateway.routes[3].filters[1]=JWTAuthorizationFilter


#POST Users
spring.cloud.gateway.routes[4].id= ibmro-groups-service-postusers
spring.cloud.gateway.routes[4].uri= lb://ibmro-groups-service
spring.cloud.gateway.routes[4].predicates[0]= Path=/groups/{segment}
spring.cloud.gateway.routes[4].predicates[1]= Method=GET

#### USERS-SERVICE Routing End
